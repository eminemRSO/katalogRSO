plugins {
	id 'org.springframework.boot' version '2.4.0'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
}


group = 'me.eminem'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
	jcenter()
}

dependencies {

	implementation "org.springframework.boot:spring-boot-starter-actuator"

	implementation 'org.springframework.boot:spring-boot-starter'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-data-rest")
	//za circuit breaker
	//implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
	//za retry
	implementation("org.springframework.retry:spring-retry")

	implementation("org.springframework.boot:spring-boot-starter-actuator")

	implementation("io.springfox:springfox-swagger2:3.+")
	implementation("io.springfox:springfox-data-rest:3.+")
	implementation("io.springfox:springfox-swagger-ui:2.9.2")

	implementation("org.msgpack:jackson-dataformat-msgpack:latest.release") {
		because("Needed for logging to elasticsearch via log4j2, fluentd")
	}
	implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:latest.release") {
		because("Needed to parse log4j2.yml")
	}
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.postgresql:postgresql:42.2.18'

	implementation 'org.modelmapper:modelmapper:2.3.0'

	annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude group : "org.junit.vintage", module : "junit-vintage-engine"
	}
}




test {
	useJUnitPlatform()
}
